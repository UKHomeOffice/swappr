apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'compass'
apply plugin: 'watch'
apply plugin: "jacoco"

repositories { jcenter() }

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-velocity")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile mysql
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile hsql, makeItEasy
}

springBoot {
    mainClass = 'uk.gov.homeofficedigital.swappr.Application'
}

compass {
    cssDir = file('src/main/resources/static/css')
    sassDir = file('src/main/resources/scss')
    debugInfo = false
    noLineComments = true
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}


processResources.inputs.files compileSass
clean.dependsOn cleanCompileSass

watch {

    java {
        files files('src/main/java')
        tasks 'compileJava'
    }

    resources {
        files fileTree(dir: 'src/main/resources')
        tasks 'processResources'
    }
}

classes.doLast {
    def repo = org.ajoberstar.grgit.Grgit.open(project.file('../'))

    def gitFile = new File(project.buildDir, "resources/main/git.properties")
    gitFile.createNewFile()
    def map = ["git.branch" : repo.branch.current.name,
               "git.commit.id" : repo.head().id,
               "git.commit.id.abbrev" : repo.head().abbreviatedId,
               "git.commit.user.name" : repo.head().author.name,
               "git.commit.user.email" : repo.head().author.email,
               "git.commit.message.short" : repo.head().shortMessage,
               "git.commit.message.full" : repo.head().fullMessage,
               "git.commit.time" : repo.head().time.toString()]
    def props = new Properties()
    props.putAll(map)
    props.store(gitFile.newWriter(), "")

}